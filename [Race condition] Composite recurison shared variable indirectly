package Threads;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;


class Composite{
    Composite compositeLocal = null;
    int x = 0;

    public Composite(int i) {
        this.x = i;
    }

    public Composite(Composite comp, int i) {
        this.compositeLocal = comp;
        this.x = i;
    }

    public synchronized void move(){ //recursion
        if(compositeLocal != null)
            compositeLocal.move();
        x++; //when does it come here?
    }

    public int getX() {
        return x;
    }
}

public class CompositeExample {

    static Composite compositeMain = new Composite(0);

    public static void main(String[] args) {
        List<Thread> threads = new ArrayList<>();

        for (int i = 0; i < 100; i++) {
            Thread t = new Thread(){
                @Override
                public void run() {
                    Composite localThreadComposite = new Composite(compositeMain, 0);
                    localThreadComposite.move();
                }
            };
            threads.add(t);
        }

        threads.forEach(Thread::start);
        threads.forEach(thread -> {
            try{
                thread.join();
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
        });

        System.out.println("X is: " + compositeMain.getX());

    }
}
